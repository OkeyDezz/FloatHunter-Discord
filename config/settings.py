"""
Configura√ß√µes simples para o Opportunity Bot.
"""
import os
from typing import Optional
from pathlib import Path

# Tenta carregar vari√°veis do arquivo .env se estiver dispon√≠vel
try:
    from dotenv import load_dotenv
    # Procura .env no diret√≥rio atual e nos pais
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ Arquivo .env carregado: {env_path}")
    else:
        # Tenta carregar do diret√≥rio atual
        load_dotenv()
        print("‚úÖ Tentativa de carregar .env do diret√≥rio atual")
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o dispon√≠vel, usando apenas vari√°veis de ambiente do sistema")

class Settings:
    """Configura√ß√µes do bot carregadas de vari√°veis de ambiente."""
    
    def __init__(self):
        # Configura√ß√µes do CSGOEmpire
        self.CSGOEMPIRE_API_KEY: str = os.getenv('CSGOEMPIRE_API_KEY', '')
        
        # Configura√ß√µes do Discord
        self.DISCORD_WEBHOOK_URL: str = os.getenv('DISCORD_WEBHOOK_URL', '')
        self.DISCORD_BOT_TOKEN: Optional[str] = os.getenv('DISCORD_BOT_TOKEN')
        self.DISCORD_CHANNEL_ID: Optional[str] = os.getenv('DISCORD_CHANNEL_ID')
        
        # Configura√ß√µes do Supabase
        self.SUPABASE_URL: str = os.getenv('SUPABASE_URL', '')
        self.SUPABASE_KEY: str = os.getenv('SUPABASE_KEY', '')
        
        # Filtros de pre√ßo (USD)
        self.MIN_PRICE: float = float(os.getenv('MIN_PRICE', '1.0'))
        self.MAX_PRICE: float = float(os.getenv('MAX_PRICE', '100.0'))
        
        # Filtros de oportunidade
        self.MIN_PROFIT_PERCENTAGE: float = float(os.getenv('MIN_PROFIT_PERCENTAGE', '5.0'))
        self.MIN_LIQUIDITY_SCORE: float = float(os.getenv('MIN_LIQUIDITY_SCORE', '30.0'))
        
        # Fator de convers√£o centavos para d√≥lar (CSGOEmpire)
        self.COIN_TO_USD_FACTOR: float = float(os.getenv('COIN_TO_USD_FACTOR', '0.614'))
        
        # Configura√ß√µes do WebSocket
        self.WEBSOCKET_RECONNECT_DELAY: int = int(os.getenv('WEBSOCKET_RECONNECT_DELAY', '5'))
        self.WEBSOCKET_MAX_RECONNECT_ATTEMPTS: int = int(os.getenv('WEBSOCKET_MAX_RECONNECT_ATTEMPTS', '10'))
        
        # Configura√ß√µes de logging
        self.LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO')
        
        # Valida√ß√µes b√°sicas
        self._validate_settings()
    
    def _validate_settings(self):
        """Valida se as configura√ß√µes essenciais est√£o presentes."""
        # Log das vari√°veis encontradas para debug
        print(f"üîç Debug - Vari√°veis de ambiente:")
        print(f"  CSGOEMPIRE_API_KEY: {'‚úÖ Definida' if self.CSGOEMPIRE_API_KEY else '‚ùå Ausente'}")
        print(f"  DISCORD_WEBHOOK_URL: {'‚úÖ Definida' if self.DISCORD_WEBHOOK_URL else '‚ùå Ausente'}")
        print(f"  SUPABASE_URL: {'‚úÖ Definida' if self.SUPABASE_URL else '‚ùå Ausente'}")
        print(f"  SUPABASE_KEY: {'‚úÖ Definida' if self.SUPABASE_KEY else '‚ùå Ausente'}")
        
        required_settings = [
            ('CSGOEMPIRE_API_KEY', self.CSGOEMPIRE_API_KEY),
            ('DISCORD_WEBHOOK_URL', self.DISCORD_WEBHOOK_URL),
            ('SUPABASE_URL', self.SUPABASE_URL),
            ('SUPABASE_KEY', self.SUPABASE_KEY)
        ]
        
        missing_settings = [name for name, value in required_settings if not value]
        
        if missing_settings:
            print(f"‚ùå Configura√ß√µes obrigat√≥rias ausentes: {', '.join(missing_settings)}")
            print(f"üí° Certifique-se de que as vari√°veis est√£o definidas no Railway ou no arquivo .env")
            print(f"üîç Listando TODAS as vari√°veis de ambiente dispon√≠veis:")
            
            # Lista todas as vari√°veis de ambiente para debug
            env_vars = dict(os.environ)
            for key, value in sorted(env_vars.items()):
                # Mascara valores sens√≠veis
                if any(sensitive in key.lower() for sensitive in ['key', 'token', 'secret', 'password']):
                    masked_value = value[:4] + "..." + value[-4:] if len(value) > 8 else "***"
                    print(f"    {key}: {masked_value}")
                else:
                    print(f"    {key}: {value}")
            
            # Para debugging no Railway, vamos permitir execu√ß√£o com warning
            print(f"‚ö†Ô∏è MODO DEBUG: Continuando execu√ß√£o mesmo sem todas as vari√°veis")
            print(f"‚ö†Ô∏è Bot pode n√£o funcionar corretamente!")
            return
            
            # Descomente a linha abaixo para parar execu√ß√£o (produ√ß√£o)
            # raise ValueError(f"Configura√ß√µes obrigat√≥rias ausentes: {', '.join(missing_settings)}")
        
        print(f"‚úÖ Todas as configura√ß√µes obrigat√≥rias est√£o presentes")
    
    def __str__(self) -> str:
        """Representa√ß√£o string das configura√ß√µes."""
        return f"""Settings:
  - Pre√ßo: ${self.MIN_PRICE:.2f} - ${self.MAX_PRICE:.2f}
  - Lucro m√≠nimo: {self.MIN_PROFIT_PERCENTAGE:.1f}%
  - Liquidez m√≠nima: {self.MIN_LIQUIDITY_SCORE:.1f}
  - Fator convers√£o: {self.COIN_TO_USD_FACTOR}
  - WebSocket: {self.WEBSOCKET_MAX_RECONNECT_ATTEMPTS} tentativas
  - Log: {self.LOG_LEVEL}"""
