"""
Scanner de marketplace para o Opportunity Bot.
"""

import asyncio
import logging
import socketio
import aiohttp
from typing import Dict, Optional, Callable
from datetime import datetime
from config.settings import Settings
from filters.profit_filter import ProfitFilter
from filters.liquidity_filter import LiquidityFilter
from utils.supabase_client import SupabaseClient
import time
import uuid

logger = logging.getLogger(__name__)

class MarketplaceScanner:
    """
    Scanner de marketplace usando WebSocket para o Opportunity Bot.
    """
    
    def __init__(self):
        self.settings = Settings()
        
        # Log das configura√ß√µes carregadas
        logger.info("üîß Configura√ß√µes carregadas:")
        logger.info(f"   - MIN_PRICE: ${self.settings.MIN_PRICE:.2f}")
        logger.info(f"   - MAX_PRICE: ${self.settings.MAX_PRICE:.2f}")
        logger.info(f"   - MIN_PROFIT_PERCENTAGE: {self.settings.MIN_PROFIT_PERCENTAGE:.1f}%")
        logger.info(f"   - MIN_LIQUIDITY_SCORE: {self.settings.MIN_LIQUIDITY_SCORE:.1f}")
        logger.info(f"   - COIN_TO_USD_FACTOR: {self.settings.COIN_TO_USD_FACTOR}")
        
        self.sio = socketio.AsyncClient()
        self.is_connected = False
        self.authenticated = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        
        # Sistema robusto de reconex√£o
        self._last_data_received = time.time()
        self._connection_start_time = None
        self._reconnect_backoff = 1  # Delay inicial em segundos
        self._max_reconnect_backoff = 300  # Delay m√°ximo: 5 minutos
        self._last_reconnect_attempt = 0
        self._consecutive_failures = 0
        self._max_consecutive_failures = 10  # M√°ximo de falhas consecutivas
        self._force_restart_after = 3600  # For√ßa restart ap√≥s 1 hora sem conex√£o est√°vel
        self._last_stable_connection = time.time()
        
        # Dados de autentica√ß√£o
        self.user_id = None
        self.socket_token = None
        self.socket_signature = None
        self.user_model = None
        
        # Filtros
        self.profit_filter = ProfitFilter(
            self.settings.MIN_PROFIT_PERCENTAGE,
            self.settings.COIN_TO_USD_FACTOR
        )
        self.liquidity_filter = LiquidityFilter(self.settings.MIN_LIQUIDITY_SCORE)
        
        # Supabase client
        self.supabase = SupabaseClient()
        
        # Callback para oportunidades
        self.opportunity_callback: Optional[Callable] = None
        
        # Configura eventos
        self._setup_socket_events()
    
    async def _setup_socket_events(self):
        """Configura os handlers de eventos do WebSocket."""
        try:
            logger.info("üîß Configurando handlers de eventos...")
            
            # Handlers de conex√£o ESSENCIAIS
            @self.sio.event(namespace='/trade')
            async def connect():
                """Conectado ao namespace /trade."""
                logger.info("üîå Conectado ao namespace /trade")
                self._connection_start_time = time.time()
                self.is_connected = True
                logger.info("‚úÖ Status atualizado: is_connected = True")
                
                # Configura automaticamente ap√≥s conectar (sem depender do init)
                logger.info("üîß Configurando WebSocket automaticamente ap√≥s conex√£o...")
                await self._configure_websocket_after_connection()
            
            @self.sio.event(namespace='/trade')
            async def disconnect():
                """Desconectado do namespace /trade."""
                logger.info("üîå Desconectado do namespace /trade")
                self.is_connected = False
                self.authenticated = False
                logger.info("‚úÖ Status atualizado: is_connected = False, authenticated = False")
            
            @self.sio.event(namespace='/trade')
            async def connect_error(data):
                """Erro de conex√£o."""
                logger.error(f"‚ùå Erro de conex√£o WebSocket: {data}")
                self.is_connected = False
                self.authenticated = False
            
            # Handler ESSENCIAL para evento init (autentica√ß√£o)
            @self.sio.on('init', namespace='/trade')
            async def on_init(data):
                """Evento de inicializa√ß√£o (ESSENCIAL para autentica√ß√£o)."""
                logger.info(f"üì° Evento init recebido: {data}")
                try:
                    if isinstance(data, dict) and data.get('authenticated'):
                        # Usu√°rio autenticado - marca como autenticado
                        logger.info("‚úÖ Usu√°rio j√° autenticado via init")
                        self.authenticated = True
                        self._update_last_data_received()
                        
                    elif isinstance(data, dict) and not data.get('authenticated'):
                        # N√£o autenticado - emite identify
                        logger.warning(f"‚ÑπÔ∏è init sem authenticated=true - dados: {data}")
                        if not self.authenticated:
                            logger.info("üÜî Usu√°rio n√£o autenticado, emitindo identify...")
                            await self._identify_and_configure()
                    else:
                        logger.warning(f"‚ö†Ô∏è Evento init com formato inesperado: {data}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar evento init: {e}")
                    import traceback
                    logger.error(f"Traceback: {traceback.format_exc()}")
            
            # APENAS eventos essenciais conforme documenta√ß√£o oficial
            @self.sio.on('new_item', namespace='/trade')
            async def on_new_item(data):
                """Novo item dispon√≠vel."""
                try:
                    logger.info(f"üÜï NOVO ITEM RECEBIDO: {type(data)}")
                    
                    if isinstance(data, list):
                        logger.info(f"üìã Lista com {len(data)} itens")
                        for item in data:
                            if isinstance(item, dict):
                                await self._process_item(item, 'new_item')
                    elif isinstance(data, dict):
                        logger.info(f"üìã Item √∫nico recebido")
                        await self._process_item(data, 'new_item')
                    
                    self._update_last_data_received()
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar new_item: {e}")
            
            @self.sio.on('deleted_item', namespace='/trade')
            async def on_deleted_item(data):
                """Item removido."""
                try:
                    if isinstance(data, list):
                        logger.debug(f"üóëÔ∏è {len(data)} itens removidos")
                    else:
                        logger.debug(f"üóëÔ∏è Item removido")
                    
                    self._update_last_data_received()
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar deleted_item: {e}")
            
            @self.sio.on('timesync', namespace='/trade')
            async def on_timesync(data):
                """Sincroniza√ß√£o de tempo."""
                logger.debug(f"‚è∞ Timesync: {data}")
                self._update_last_data_received()
            
            # Handler gen√©rico para capturar TODOS os eventos (debug)
            @self.sio.on('*', namespace='/trade')
            async def on_any_event(event, data):
                """Captura TODOS os eventos para debug."""
                try:
                    # Log apenas eventos que n√£o temos handlers espec√≠ficos
                    if event not in ['new_item', 'deleted_item', 'timesync', 'init']:
                        logger.info(f"üì° EVENTO N√ÉO TRATADO: {event} - Tipo: {type(data)}")
                        
                        # Se for lista com itens, pode ser importante
                        if isinstance(data, list) and len(data) > 0:
                            if isinstance(data[0], dict) and 'id' in data[0]:
                                logger.info(f"üéØ ITENS DETECTADOS em '{event}': {len(data)} itens")
                                for item in data:
                                    if isinstance(item, dict) and 'id' in item:
                                        await self._process_item(item, event)
                    
                    self._update_last_data_received()
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar evento '{event}': {e}")
            
            logger.info("‚úÖ Handlers de eventos configurados")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar eventos: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    async def _identify_and_configure(self):
        """M√©todo removido - configura√ß√£o √© feita automaticamente ap√≥s conectar."""
        pass
    
    async def _handle_new_item(self, data: Dict):
        """Processa novo item."""
        try:
            logger.debug(f"Novo item: {data}")
            await self._process_item(data, "new_item")
        except Exception as e:
            logger.error(f"Erro ao processar novo item: {e}")
    
    async def _handle_updated_item(self, data: Dict):
        """Processa item atualizado."""
        try:
            logger.debug(f"Item atualizado: {data}")
            await self._process_item(data, "updated_item")
        except Exception as e:
            logger.error(f"Erro ao processar item atualizado: {e}")
    
    async def _handle_auction_update(self, data: Dict):
        """Processa atualiza√ß√£o de leil√£o."""
        try:
            logger.debug(f"Atualiza√ß√£o de leil√£o: {data}")
            await self._process_item(data, "auction_update")
        except Exception as e:
            logger.error(f"Erro ao processar atualiza√ß√£o de leil√£o: {e}")
    
    async def _handle_auction_end(self, data: Dict):
        """Processa fim de leil√£o."""
        try:
            logger.debug(f"Fim de leil√£o: {data}")
            # N√£o processa fim de leil√£o como oportunidade
        except Exception as e:
            logger.error(f"Erro ao processar fim de leil√£o: {e}")
    
    async def _handle_deleted_item(self, data: Dict):
        """Processa item deletado."""
        try:
            logger.debug(f"Item deletado: {data}")
            # N√£o processa itens deletados como oportunidade
        except Exception as e:
            logger.error(f"Erro ao processar item deletado: {e}")
    
    async def _process_item(self, item: Dict, event_type: str) -> None:
        """Processa um item recebido."""
        try:
            # FILTRO ULTRA-R√ÅPIDO DE PRE√áO (ANTES de qualquer processamento)
            if not self._check_basic_price_filter_ultra_fast(item):
                return  # Sai imediatamente se pre√ßo n√£o estiver no range
            
            # Log do item sendo processado
            item_name = item.get('market_name', item.get('name', 'Unknown'))
            item_id = item.get('id', 'Unknown')
            logger.info(f"üéØ PROCESSANDO ITEM: {item_name} (ID: {item_id}) - Evento: {event_type}")
            
            # Extrai dados b√°sicos do item
            extracted_item = self._extract_item_data(item)
            if not extracted_item:
                logger.warning(f"‚ö†Ô∏è Falha ao extrair dados do item: {item_name}")
                return
            
            # Enriquece com dados da database
            await self._enrich_item_data(extracted_item)
            
            # Aplica filtros de oportunidade
            if await self._apply_opportunity_filters(extracted_item):
                # Oportunidade encontrada!
                logger.info(f"üéØ OPORTUNIDADE ENCONTRADA: {extracted_item.get('name')}")
                
                # Envia para Discord
                await self.discord_poster.post_opportunity(extracted_item)
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar item: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    def _check_basic_price_filter_ultra_fast(self, item: Dict) -> bool:
        """
        Filtro de pre√ßo ULTRA-R√ÅPIDO aplicado ANTES de qualquer processamento.
        Evita processar itens caros desnecessariamente.
        """
        try:
            # Extrai pre√ßo em centavos
            purchase_price_centavos = item.get('purchase_price')
            if purchase_price_centavos is None:
                return False
            
            # Converte para USD (ultra-r√°pido)
            price_usd = (purchase_price_centavos / 100) * self.settings.COIN_TO_USD_FACTOR
            
            # Filtros de pre√ßo configurados
            min_price = self.settings.MIN_PRICE
            max_price = self.settings.MAX_PRICE
            
            # Verifica pre√ßo m√≠nimo (ultra-r√°pido)
            if price_usd < min_price:
                logger.debug(f"üö´ Item {item.get('market_name', 'Unknown')} REJEITADO: ${price_usd:.2f} < ${min_price:.2f} (MIN_PRICE)")
                return False
            
            # Verifica pre√ßo m√°ximo (ultra-r√°pido)
            if price_usd > max_price:
                logger.debug(f"üö´ Item {item.get('market_name', 'Unknown')} REJEITADO: ${price_usd:.2f} > ${max_price:.2f} (MAX_PRICE)")
                return False
            
            # Item passou no filtro de pre√ßo b√°sico
            logger.debug(f"‚úÖ Item {item.get('market_name', 'Unknown')} ACEITO no filtro de pre√ßo: ${price_usd:.2f}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro no filtro de pre√ßo ultra-r√°pido: {e}")
            return False
    
    async def _enrich_item_data(self, item: Dict) -> None:
        """Enriquece o item com dados da database."""
        try:
            base_name = item.get('base_name')
            is_stattrak = item.get('is_stattrak', False)
            is_souvenir = item.get('is_souvenir', False)
            condition = item.get('condition')
            
            if not base_name:
                logger.warning(f"‚ö†Ô∏è Item sem base_name: {item.get('name', 'Unknown')}")
                return
            
            logger.info(f"üîç Enriquecendo item: {base_name}")
            logger.info(f"   - StatTrak: {is_stattrak}")
            logger.info(f"   - Souvenir: {is_souvenir}")
            logger.info(f"   - Condi√ß√£o: {condition}")
            
            # Busca pre√ßo Buff163 (UMA √öNICA consulta)
            price_buff163 = await self.supabase.get_buff163_price_advanced(
                base_name, is_stattrak, is_souvenir, condition
            )
            
            if price_buff163 is not None:
                item['price_buff163'] = price_buff163
                logger.info(f"üí∞ Pre√ßo Buff163 encontrado: ${price_buff163:.2f}")
            else:
                logger.warning(f"‚ö†Ô∏è Pre√ßo Buff163 n√£o encontrado para: {base_name}")
                item['price_buff163'] = None
            
            # Busca score de liquidez (UMA √öNICA consulta)
            liquidity_score = await self.supabase.get_liquidity_score_advanced(
                base_name, is_stattrak, is_souvenir, condition
            )
            
            if liquidity_score is not None:
                item['liquidity_score'] = liquidity_score
                logger.info(f"üíß Score de liquidez encontrado: {liquidity_score:.1f}")
            else:
                logger.warning(f"‚ö†Ô∏è Score de liquidez n√£o encontrado para: {base_name}")
                item['liquidity_score'] = None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enriquecer item: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    def _extract_item_data(self, data: Dict) -> Optional[Dict]:
        """Extrai dados relevantes do item do CSGOEmpire."""
        try:
            # Campos obrigat√≥rios do CSGOEmpire
            item_id = data.get('id')
            market_name = data.get('market_name')
            purchase_price = data.get('purchase_price')  # Pre√ßo em centavos
            suggested_price = data.get('suggested_price')  # Pre√ßo sugerido em USD
            
            if not all([item_id, market_name, purchase_price]):
                logger.debug(f"Dados incompletos do item: {data}")
                return None
            
            # Parse do nome do item (baseado no bot principal)
            base_name, is_stattrak, is_souvenir, condition = self._parse_market_hash_name(market_name)
            
            # Dados adicionais
            float_value = data.get('wear')
            auction_ends_at = data.get('auction_ends_at')
            auction_highest_bid = data.get('auction_highest_bid')
            auction_number_of_bids = data.get('auction_number_of_bids', 0)
            
            # Converte pre√ßo de centavos para USD (fator 0.614)
            # CSGOEmpire retorna pre√ßos em centavos, n√£o em coin
            price_usd = (purchase_price / 100) * self.settings.COIN_TO_USD_FACTOR
            
            logger.info(f"üí∞ Item: {market_name}")
            logger.info(f"   - Base: {base_name}")
            logger.info(f"   - StatTrak: {is_stattrak}")
            logger.info(f"   - Souvenir: {is_souvenir}")
            logger.info(f"   - Condi√ß√£o: {condition}")
            logger.info(f"   - Pre√ßo CSGOEmpire: {purchase_price} centavos = ${price_usd:.2f}")
            logger.info(f"   - Pre√ßo sugerido CSGOEmpire: ${suggested_price}")
            logger.info(f"   - Leil√£o termina: {auction_ends_at}")
            logger.info(f"   - Lances: {auction_number_of_bids}")
            
            return {
                'id': item_id,
                'name': market_name,
                'market_hash_name': market_name,  # Nome completo para busca
                'base_name': base_name,  # Nome base sem flags
                'is_stattrak': is_stattrak,
                'is_souvenir': is_souvenir,
                'condition': condition,
                'price': price_usd,  # Pre√ßo convertido para USD
                'price_centavos': purchase_price,  # Pre√ßo original em centavos
                'suggested_price_csgoempire': suggested_price,  # Pre√ßo sugerido do CSGOEmpire
                'float_value': float_value,
                'auction_ends_at': auction_ends_at,
                'auction_highest_bid': auction_highest_bid,
                'auction_number_of_bids': auction_number_of_bids,
                'marketplace': 'csgoempire',
                'detected_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair dados do item: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None
    
    def _parse_market_hash_name(self, name: str) -> tuple:
        """
        Parse do nome do item (baseado no bot principal).
        
        Args:
            name: Nome completo do item
            
        Returns:
            tuple: (base_name, is_stattrak, is_souvenir, condition)
        """
        try:
            if not name:
                return "", False, False, None
            
            s = name.strip()
            stattrak = ("StatTrak‚Ñ¢" in s) or ("StatTrak" in s)
            souvenir = ("Souvenir" in s)
            condition_local = None
            
            # Lista de condi√ß√µes poss√≠veis
            conditions = [
                "Factory New",
                "Minimal Wear", 
                "Field-Tested",
                "Well-Worn",
                "Battle-Scarred",
            ]
            
            # Remove a condi√ß√£o do final do nome
            for c in conditions:
                suffix = f"({c})"
                if s.endswith(suffix):
                    condition_local = c
                    s = s[: -len(suffix)].strip()
                    break
            
            # Remove flags do in√≠cio do nome
            base = (
                s.replace("StatTrak‚Ñ¢ ", "")
                 .replace("StatTrak ", "")
                 .replace("Souvenir ", "")
                 .strip()
            )
            
            return base, stattrak, souvenir, condition_local
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao fazer parse do nome: {e}")
            return name, False, False, None
    
    async def _apply_opportunity_filters(self, item: Dict) -> bool:
        """
        Aplica filtros de oportunidade de forma otimizada.
        Retorna True se o item passar em todos os filtros.
        """
        try:
            # Filtro de lucro
            profit_filter = ProfitFilter(self.settings.MIN_PROFIT_PERCENTAGE)
            if not await profit_filter.check(item):
                logger.debug(f"‚ùå Item {item.get('name')} REJEITADO pelo filtro de lucro")
                return False
            
            # Filtro de liquidez
            liquidity_filter = LiquidityFilter(self.settings.MIN_LIQUIDITY_SCORE)
            if not await liquidity_filter.check(item):
                logger.debug(f"‚ùå Item {item.get('name')} REJEITADO pelo filtro de liquidez")
                return False
            
            # Item passou em todos os filtros
            logger.info(f"‚úÖ Item {item.get('name')} ACEITO em todos os filtros")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao aplicar filtros de oportunidade: {e}")
            return False
    
    async def _check_filters(self, item: Dict) -> bool:
        """Verifica se o item passa nos filtros configurados."""
        try:
            # Filtro de lucro
            if not await self.profit_filter.check(item):
                logger.debug(f"Item {item.get('name')} rejeitado pelo filtro de lucro")
                return False
            
            # Filtro de liquidez
            if not await self.liquidity_filter.check(item):
                logger.debug(f"Item {item.get('name')} rejeitado pelo filtro de liquidez")
                return False
            
            logger.debug(f"Item {item.get('name')} passou em todos os filtros")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar filtros: {e}")
            return False
    
    async def _check_connection_health(self) -> bool:
        """Verifica se a conex√£o WebSocket est√° realmente ativa."""
        try:
            # Verifica se o socket est√° conectado
            if not self.sio.connected:
                logger.debug("‚ùå Socket.IO n√£o est√° conectado")
                await self._handle_connection_loss()
                return False
            
            # Verifica se est√° autenticado
            if not self.authenticated:
                logger.debug("‚ùå WebSocket n√£o est√° autenticado")
                await self._handle_connection_loss()
                return False
            
            # Verifica se recebeu dados recentemente
            if hasattr(self, '_last_data_received'):
                time_since_data = time.time() - self._last_data_received
                if time_since_data > 300:  # 5 minutos sem dados
                    logger.warning(f"‚ö†Ô∏è Sem dados recebidos h√° {time_since_data:.0f}s")
                    await self._handle_connection_loss()
                    return False
            
            logger.debug("‚úÖ Conex√£o WebSocket est√° saud√°vel")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar sa√∫de da conex√£o: {e}")
            await self._handle_connection_loss()
            return False
    
    async def _send_heartbeat(self):
        """Envia heartbeat para manter conex√£o ativa."""
        try:
            if self.sio.connected and self.authenticated:
                # Envia evento de ping (se suportado pelo servidor)
                await self.sio.emit('ping', namespace='/trade')
                logger.debug("üíì Heartbeat enviado")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Erro ao enviar heartbeat: {e}")
    
    async def _handle_connection_loss(self):
        """
        Gerencia perda de conex√£o de forma robusta.
        Implementa backoff exponencial e fallback para restart.
        """
        try:
            current_time = time.time()
            time_since_data = current_time - self._last_data_received
            time_since_stable = current_time - self._last_stable_connection
            
            logger.warning(f"‚ö†Ô∏è Sem dados recebidos h√° {time_since_data:.0f}s")
            logger.warning(f"‚ö†Ô∏è √öltima conex√£o est√°vel h√° {time_since_stable:.0f}s")
            
            # Verifica se deve for√ßar restart
            if time_since_stable > self._force_restart_after:
                logger.error(f"üö® For√ßando restart ap√≥s {self._force_restart_after/3600:.1f}h sem conex√£o est√°vel")
                await self._force_restart()
                return
            
            # Verifica se excedeu falhas consecutivas
            if self._consecutive_failures >= self._max_consecutive_failures:
                logger.error(f"üö® Excedeu {self._max_consecutive_failures} falhas consecutivas, for√ßando restart")
                await self._force_restart()
                return
            
            # Calcula delay de reconex√£o com backoff exponencial
            if current_time - self._last_reconnect_attempt < self._reconnect_backoff:
                logger.info(f"‚è≥ Aguardando {self._reconnect_backoff:.0f}s antes da pr√≥xima tentativa...")
                return
            
            # Tenta reconectar
            logger.info(f"üîÑ Tentativa de reconex√£o {self._consecutive_failures + 1}/{self._max_consecutive_failures}")
            
            if await self._attempt_reconnection():
                # Sucesso na reconex√£o
                self._consecutive_failures = 0
                self._reconnect_backoff = 1  # Reset do backoff
                self._last_stable_connection = current_time
                logger.info("‚úÖ Reconex√£o bem-sucedida!")
            else:
                # Falha na reconex√£o
                self._consecutive_failures += 1
                self._reconnect_backoff = min(self._reconnect_backoff * 2, self._max_reconnect_backoff)
                self._last_reconnect_attempt = current_time
                logger.warning(f"‚ùå Reconex√£o falhou. Pr√≥xima tentativa em {self._reconnect_backoff:.0f}s")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerenciar perda de conex√£o: {e}")
            self._consecutive_failures += 1
    
    async def _attempt_reconnection(self) -> bool:
        """
        Tenta reconectar ao WebSocket.
        
        Returns:
            bool: True se reconex√£o bem-sucedida
        """
        try:
            # Desconecta completamente
            if self.sio.connected:
                await self.sio.disconnect()
            
            # Reseta estado
            self.is_connected = False
            self.authenticated = False
            
            # Aguarda um pouco antes de tentar
            await asyncio.sleep(2)
            
            # Tenta reconectar
            if await self._connect_websocket():
                # Aguarda autentica√ß√£o
                auth_timeout = 30  # 30 segundos para autenticar
                start_time = time.time()
                
                while not self.authenticated and (time.time() - start_time) < auth_timeout:
                    await asyncio.sleep(1)
                
                if self.authenticated:
                    logger.info("‚úÖ Reconex√£o e autentica√ß√£o bem-sucedidas")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Reconex√£o bem-sucedida, mas autentica√ß√£o falhou")
                    return False
            else:
                logger.warning("‚ö†Ô∏è Falha na reconex√£o")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante tentativa de reconex√£o: {e}")
            return False
    
    async def _force_restart(self):
        """
        For√ßa restart completo do scanner.
        √öltimo recurso quando reconex√£o falha repetidamente.
        """
        try:
            logger.error("üö® INICIANDO RESTART COMPLETO DO SCANNER")
            
            # Desconecta tudo
            await self.disconnect()
            
            # Aguarda um pouco
            await asyncio.sleep(10)
            
            # Reseta estado
            self._consecutive_failures = 0
            self._reconnect_backoff = 1
            self._last_stable_connection = time.time()
            
            # Tenta reconectar do zero
            if await self._connect_websocket():
                logger.info("‚úÖ Restart completo bem-sucedido!")
            else:
                logger.error("‚ùå Restart completo falhou")
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante restart completo: {e}")
    
    def _update_last_data_received(self):
        """Atualiza timestamp do √∫ltimo dado recebido."""
        self._last_data_received = time.time()
        # Se recebeu dados, considera conex√£o est√°vel
        if self.is_connected and self.authenticated:
            self._last_stable_connection = time.time()
    
    async def _connect_websocket(self) -> bool:
        """Conecta ao WebSocket do CSGOEmpire seguindo exatamente a documenta√ß√£o."""
        try:
            # Verifica se j√° est√° conectado
            if self.sio.connected:
                logger.info("‚úÖ WebSocket j√° est√° conectado")
                return True
            
            if not all([self.user_id, self.socket_token, self.socket_signature]):
                logger.error("‚ùå Dados de autentica√ß√£o incompletos")
                logger.error(f"  - user_id: {self.user_id}")
                logger.error(f"  - socket_token: {self.socket_token[:20]}..." if self.socket_token else "None")
                logger.error(f"  - socket_signature: {self.socket_signature[:20]}..." if self.socket_signature else "None")
                return False
            
            # Headers usados pelo bot principal
            headers = {
                'User-Agent': 'Mozilla/5.0',
                'Origin': 'https://trade.csgoempire.com',
                'Referer': 'https://trade.csgoempire.com/'
            }
            
            # Query string com uid e token (mesmo formato do bot principal)
            qs = f"uid={self.user_id}&token={self.socket_token}"
            
            logger.info(f"üîå Conectando ao WebSocket: trade.csgoempire.com/?{qs}")
            
            # Conecta usando a mesma URL e namespace do bot principal
            await self.sio.connect(
                f"https://trade.csgoempire.com/?{qs}",
                socketio_path='s/',
                headers=headers,
                transports=['websocket'],
                namespaces=['/trade']
            )
            
            logger.info("üîå WebSocket conectado ao namespace /trade")
            
            # Aguarda um pouco para a conex√£o estabilizar
            await asyncio.sleep(2)
            
            # Verifica se ainda est√° conectado
            if not self.sio.connected:
                logger.error("‚ùå WebSocket desconectado ap√≥s conex√£o")
                return False
            
            logger.info("‚úÖ WebSocket conectado com sucesso")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar WebSocket: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    async def _authenticate_websocket(self) -> bool:
        """M√©todo removido - autentica√ß√£o √© feita automaticamente ap√≥s conectar."""
        pass
    
    async def start(self):
        """Inicia o scanner de marketplace."""
        try:
            logger.info("üöÄ Iniciando scanner de marketplace...")
            
            # Obt√©m metadata antes de conectar
            if not await self._get_socket_metadata():
                logger.error("‚ùå Falha ao obter metadata")
                return False
            
            # Testa conex√£o com Supabase
            logger.info("üîç Testando conex√£o com Supabase...")
            if not await self.supabase.test_connection():
                logger.error("‚ùå Falha na conex√£o com Supabase")
                return False
            
            # Conecta ao WebSocket
            logger.info("üîÑ Tentando conectar ao WebSocket...")
            if not await self._connect_websocket():
                logger.error("‚ùå Falha ao conectar ao WebSocket")
                return False
            
            # Configura handlers de eventos
            logger.info("üîß Configurando handlers de eventos...")
            await self._setup_socket_events()
            
            # Verifica se j√° est√° conectado
            if self.sio.connected:
                logger.info("‚úÖ WebSocket j√° est√° conectado")
                # Configura automaticamente se j√° estiver conectado
                await self._configure_websocket_after_connection()
            else:
                logger.warning("‚ö†Ô∏è WebSocket n√£o est√° conectado")
                return False
            
            # Aguarda um pouco para estabilizar
            await asyncio.sleep(2)
            
            # Verifica se est√° funcionando
            if self.authenticated:
                logger.info("‚úÖ Scanner iniciado com sucesso!")
                return True
            else:
                logger.warning("‚ö†Ô∏è Scanner iniciado mas autentica√ß√£o n√£o confirmada")
                return True  # Continua mesmo sem confirma√ß√£o de autentica√ß√£o
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar scanner: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    async def connect(self):
        """Alias para start() - mant√©m compatibilidade."""
        return await self.start()
    
    async def _get_socket_metadata(self) -> bool:
        """Obt√©m metadata para autentica√ß√£o do WebSocket (seguindo docs)."""
        try:
            if not self.settings.CSGOEMPIRE_API_KEY:
                logger.error("‚ùå API key do CSGOEmpire n√£o configurada")
                return False
            
            # Endpoint correto usado pelo bot principal
            url = "https://csgoempire.com/api/v2/metadata/socket"
            headers = {
                "Authorization": f"Bearer {self.settings.CSGOEMPIRE_API_KEY}",
                "Accept": "application/json",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Origin": "https://csgoempire.com",
                "Referer": "https://csgoempire.com/"
            }
            
            async with aiohttp.ClientSession() as session:
                # Tentativa principal com Authorization
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        js_data = data.get('data') or data
                        
                        self.user_id = js_data.get('user', {}).get('id')
                        self.socket_token = js_data.get('socket_token')
                        self.socket_signature = js_data.get('socket_signature') or js_data.get('token_signature')
                        self.user_model = js_data.get('user')
                        
                        if all([self.user_id, self.socket_token, self.socket_signature, self.user_model]):
                            logger.info("‚úÖ Metadata obtida com sucesso")
                            return True
                        else:
                            logger.error("‚ùå Dados de autentica√ß√£o incompletos na resposta principal")
                    else:
                        try:
                            txt = await response.text()
                        except Exception:
                            txt = ''
                        logger.error(f"‚ùå Erro ao obter metadata: {response.status} {txt[:200]}")
                
                # Fallback com token na querystring (alguns ambientes bloqueiam Authorization)
                logger.info("üîÑ Tentando fallback com token na querystring...")
                async with session.get(
                    url,
                    params={"token": self.settings.CSGOEMPIRE_API_KEY},
                    headers={k: v for k, v in headers.items() if k != "Authorization"}
                ) as response2:
                    if response2.status == 200:
                        data2 = await response2.json()
                        js_data2 = data2.get('data') or data2
                        
                        self.user_id = js_data2.get('user', {}).get('id')
                        self.socket_token = js_data2.get('socket_token')
                        self.socket_signature = js_data2.get('socket_signature') or js_data2.get('token_signature')
                        self.user_model = js_data2.get('user')
                        
                        if all([self.user_id, self.socket_token, self.socket_signature, self.user_model]):
                            logger.info("‚úÖ Metadata obtida com sucesso via fallback")
                            return True
                        else:
                            logger.error("‚ùå Dados de autentica√ß√£o incompletos no fallback")
                    else:
                        try:
                            txt2 = await response2.text()
                        except Exception:
                            txt2 = ''
                        logger.error(f"‚ùå Erro ao obter metadata (fallback): {response2.status} {txt2[:200]}")
                
                return False
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter metadata: {e}")
            return False
    
    def set_opportunity_callback(self, callback: Callable):
        """Define callback para oportunidades encontradas."""
        self.opportunity_callback = callback
    
    async def disconnect(self):
        """Desconecta do WebSocket."""
        try:
            if self.sio.connected:
                await self.sio.disconnect()
                logger.info("üîå WebSocket desconectado")
            
            self.is_connected = False
            self.authenticated = False
            self.reconnect_attempts = 0
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao desconectar: {e}")
    
    async def run_forever(self):
        """Executa o scanner indefinidamente."""
        try:
            logger.info("üöÄ Iniciando scanner de marketplace...")
            
            while True:
                try:
                    # Tenta conectar
                    if await self.start():
                        logger.info("‚úÖ Scanner conectado, aguardando oportunidades...")
                        
                        # Loop de monitoramento com verifica√ß√£o de sa√∫de
                        while True:
                            # Verifica sa√∫de da conex√£o
                            if not await self._check_connection_health():
                                logger.warning("‚ö†Ô∏è Conex√£o n√£o est√° saud√°vel, tentando reconectar...")
                                break
                            
                            # Envia heartbeat a cada 30 segundos
                            await self._send_heartbeat()
                            
                            # Aguarda pr√≥ximo ciclo
                            await asyncio.sleep(30)
                            
                            # Log de status a cada 2 minutos
                            if hasattr(self, '_connection_start_time') and self._connection_start_time:
                                uptime = time.time() - self._connection_start_time
                                if int(uptime) % 120 == 0:  # A cada 2 minutos
                                    logger.info(f"üìä Status: Conectado h√° {int(uptime)}s, autenticado: {self.authenticated}")
                        
                        # Se chegou aqui, perdeu conex√£o
                        logger.warning("‚ö†Ô∏è Conex√£o perdida, aguardando antes de reconectar...")
                        await asyncio.sleep(10)
                        
                    else:
                        # Falha na conex√£o
                        if self.reconnect_attempts >= self.max_reconnect_attempts:
                            logger.error("‚ùå M√°ximo de tentativas atingido, aguardando 5 minutos...")
                            await asyncio.sleep(300)  # 5 minutos
                            self.reconnect_attempts = 0  # Reset
                        else:
                            logger.warning(f"‚ö†Ô∏è Tentativa {self.reconnect_attempts + 1}/{self.max_reconnect_attempts} falhou")
                            await asyncio.sleep(30)  # 30 segundos
                            
                except Exception as e:
                    logger.error(f"‚ùå Erro no loop principal: {e}")
                    await asyncio.sleep(30)
                    
        except asyncio.CancelledError:
            logger.info("üõë Scanner cancelado")
        except Exception as e:
            logger.error(f"‚ùå Erro fatal no scanner: {e}")
        finally:
            await self.disconnect()

    async def start_polling_fallback(self):
        """M√©todo removido - foco apenas no WebSocket ultra-r√°pido."""
        pass
    
    async def fetch_items_via_api_fallback(self):
        """Busca itens via API do CSGOEmpire como fallback."""
        try:
            logger.info("üîç Buscando itens via API de fallback...")
            
            # URL da API conforme documenta√ß√£o
            api_url = "https://csgoempire.com/api/v2/trading/items"
            
            # Par√¢metros para buscar itens recentes
            params = {
                'per_page': 50,  # M√°ximo de itens por p√°gina
                'page': 1,
                'auction': 'yes',  # Apenas itens de leil√£o
                'sort': 'desc',  # Mais recentes primeiro
                'order': 'market_value'  # Ordenar por valor de mercado
            }
            
            # Headers necess√°rios
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            
            # Faz a requisi√ß√£o HTTP
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if 'data' in data and isinstance(data['data'], list):
                            items = data['data']
                            logger.info(f"üì° API retornou {len(items)} itens")
                            
                            # Processa cada item encontrado
                            for item in items:
                                if isinstance(item, dict) and 'id' in item:
                                    logger.info(f"üéØ Processando item da API: {item.get('market_name', 'Unknown')}")
                                    await self._process_item(item, 'api_fallback')
                        else:
                            logger.warning(f"‚ö†Ô∏è Formato inesperado da API: {data}")
                    else:
                        logger.error(f"‚ùå API retornou status {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar itens via API: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    async def start_api_fallback_monitor(self):
        """Inicia monitoramento para usar API de fallback quando necess√°rio."""
        logger.info("üîÑ Iniciando monitor de API de fallback...")
        
        while True:
            try:
                # Verifica se WebSocket est√° funcionando bem
                time_since_last_data = time.time() - self._last_data_received
                
                # Se n√£o recebeu dados h√° mais de 5 minutos, usa API de fallback
                if time_since_last_data > 300:  # 5 minutos
                    logger.warning(f"‚ö†Ô∏è Sem dados h√° {time_since_last_data:.0f}s, usando API de fallback...")
                    await self.fetch_items_via_api_fallback()
                
                # Aguarda antes da pr√≥xima verifica√ß√£o
                await asyncio.sleep(60)  # Verifica a cada 1 minuto
                
            except Exception as e:
                logger.error(f"‚ùå Erro no monitor de API: {e}")
                await asyncio.sleep(60)

    async def _configure_websocket_after_connection(self):
        """Configura o WebSocket automaticamente ap√≥s conectar."""
        try:
            logger.info("üîß Configurando WebSocket ap√≥s conex√£o...")
            
            # Aguarda um pouco para estabilizar a conex√£o
            await asyncio.sleep(1)
            
            # Emite identify para autenticar
            logger.info("üÜî Emitindo identify para autentica√ß√£o...")
            await self.sio.emit('identify', {
                'uid': self.user_id,
                'authorizationToken': self.socket_token,
                'signature': self.socket_signature,
                'uuid': str(uuid.uuid4())
            }, namespace='/trade')
            
            # N√ÉO aguarda resposta do init - configura diretamente
            logger.info("‚ö° Configurando filtros e eventos diretamente ap√≥s identify...")
            
            # Configura APENAS eventos essenciais conforme documenta√ß√£o oficial
            logger.info("üì§ Configurando eventos permitidos...")
            await self.sio.emit('allowedEvents', {
                'events': ['new_item', 'deleted_item']
            }, namespace='/trade')
            logger.info("üì§ Eventos permitidos configurados: new_item, deleted_item")
            
            # Configura filtros de pre√ßo
            logger.info("üì§ Configurando filtros de pre√ßo...")
            await self.sio.emit('filters', {
                'price_min': self.settings.MIN_PRICE,
                'price_max': self.settings.MAX_PRICE
            }, namespace='/trade')
            logger.info("üì§ Filtros de pre√ßo configurados")
            
            # Sincroniza√ß√£o de tempo
            logger.info("üì§ Solicitando timesync...")
            await self.sio.emit('timesync', namespace='/trade')
            logger.info("üì§ Timesync solicitado")
            
            # Marca como autenticado e configurado
            self.authenticated = True
            
            # Log de configura√ß√£o
            logger.info("üîç Configura√ß√£o do WebSocket conclu√≠da:")
            logger.info("   - Filtros de pre√ßo: $%.2f - $%.2f" % (self.settings.MIN_PRICE, self.settings.MAX_PRICE))
            logger.info("   - Eventos permitidos: new_item, deleted_item")
            logger.info("   - Aguardando itens...")
            
            # Log especial para debug
            logger.info("üîç MONITORAMENTO ATIVO:")
            logger.info("   - WebSocket: ‚úÖ Conectado")
            logger.info("   - Autentica√ß√£o: ‚úÖ Confirmada")
            logger.info("   - Eventos: ‚úÖ Permitidos")
            logger.info("   - Filtros: ‚úÖ Configurados")
            logger.info("   - Status: üéØ PRONTO PARA CAPTURAR ITENS!")
            
            self._update_last_data_received()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar WebSocket ap√≥s conex√£o: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
